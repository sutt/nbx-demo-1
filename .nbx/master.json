{"cells": [{"cell_type": "code", "execution_count": 3, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["simulations run 10000\n", "mean of number of pull 33.7267\n"]}], "source": ["N_SOCKS = 365\n", "N = 10_000\n", "starting_socks = 2* [i for i in range(N_SOCKS)]\n", "n_pulls = []\n", "\n", "for n in range(N):\n", "    \n", "    socks = starting_socks.copy()\n", "    pulled = []\n", "    \n", "    for pull_i in range(N_SOCKS + 1):\n", "        \n", "        ind = numpy.random.randint(0, len(socks) - 1)\n", "        \n", "        _sock = socks.pop(ind)\n", "        \n", "        if _sock in pulled:\n", "            n_pulls.append(pull_i + 1)\n", "            break\n", "        else:\n", "            pulled.append(_sock)\n", "            \n", "print(f'simulations run {len(n_pulls)}')\n", "print(f'mean of number of pull {numpy.mean(n_pulls)}')\n", "\n"]}, {"cell_type": "code", "execution_count": 5, "metadata": {}, "outputs": [{"data": {"image/png": "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\n", "text/plain": ["<Figure size 432x288 with 1 Axes>"]}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": ["plt.hist(n_pulls, bins=50)\n", "plt.vlines(numpy.mean(n_pulls),0,600)\n", "plt.title(f'Historgram of n_pulls for {N_SOCKS} socks');\n", "plt.show()"]}]}