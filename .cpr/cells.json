{"cells": [{"cell_type": "code", "execution_count": 3, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["simulations run 10000\n", "mean of number of pull 33.9926\n"]}], "source": ["N_SOCKS = 365\n", "N = 10_000\n", "starting_socks = 2* [i for i in range(N_SOCKS)]\n", "n_pulls = []\n", "\n", "for n in range(N):\n", "    \n", "    socks = starting_socks.copy()\n", "    pulled = []\n", "    \n", "    for pull_i in range(N_SOCKS + 1):\n", "        \n", "        ind = numpy.random.randint(0, len(socks) - 1)\n", "        \n", "        _sock = socks.pop(ind)\n", "        \n", "        if _sock in pulled:\n", "            n_pulls.append(pull_i + 1)\n", "            break\n", "        else:\n", "            pulled.append(_sock)\n", "            \n", "print(f'simulations run {len(n_pulls)}')\n", "print(f'mean of number of pull {numpy.mean(n_pulls)}')"]}, {"cell_type": "code", "execution_count": 5, "metadata": {}, "outputs": [{"data": {"image/png": "\n", "text/plain": ["<Figure size 432x288 with 1 Axes>"]}, "metadata": {"needs_background": "light"}, "output_type": "display_data"}], "source": ["plt.hist(n_pulls, bins=50)\n", "plt.vlines(numpy.mean(n_pulls),0,600)\n", "plt.title(f'Historgram of n_pulls for {N_SOCKS} socks');\n", "plt.show()"]}]}